// =====================================================
// APP LAYOUT INTELIGENTE - src/components/AppLayout.tsx
// =====================================================

'use client'

import React from 'react'
import { usePathname } from 'next/navigation'
import { useAuth } from '@/components/AuthProvider'
import { SilkBackground } from '@/components/SilkBackground'
import { Sidebar } from '@/components/Sidebar'
import { AuthLoading } from '@/components/AuthLoading'

interface AppLayoutProps {
  children: React.ReactNode
}

export const AppLayout: React.FC<AppLayoutProps> = ({ children }) => {
  const pathname = usePathname()
  const { user, isAuthenticated, isLoading } = useAuth()

  // Rutas p√∫blicas que no requieren sidebar
  const publicRoutes = [
    '/', 
    '/auth/signin', 
    '/auth/signup', 
    '/auth/register', 
    '/auth/error', 
    '/auth/suspended', 
    '/auth/unauthorized',
    '/auth/confirm'
  ]
  
  // Verificar si es una ruta p√∫blica
  const isPublicRoute = publicRoutes.includes(pathname) || pathname.startsWith('/auth/')
  
  console.log('üìÑ AppLayout:', { pathname, isPublicRoute, isAuthenticated, isLoading });

  // Si est√° cargando la autenticaci√≥n, mostrar loading
  if (isLoading) {
    console.log('‚è≥ AppLayout: Showing loading');
    return <AuthLoading />
  }

  // Para rutas p√∫blicas, renderizar sin sidebar
  if (isPublicRoute) {
    console.log('üåç AppLayout: Rendering public route');
    return (
      <>
        {children}
      </>
    )
  }

  // Para rutas protegidas, verificar autenticaci√≥n
  if (!isAuthenticated || !user) {
    console.log('üîí AppLayout: Not authenticated, showing loading (will redirect)');
    // No redirigir aqu√≠, dejar que AuthProvider maneje las redirecciones
    // Solo mostrar loading mientras AuthProvider hace su trabajo
    return <AuthLoading />
  }

  // Para rutas protegidas con usuario autenticado, mostrar layout completo
  console.log('‚úÖ AppLayout: Rendering authenticated layout');
  return (
    <div className="min-h-screen relative">
      <SilkBackground />
      <div className="relative z-10 flex">
        <Sidebar />
        <main className="flex-1 ml-64 p-6">
          {children}
        </main>
      </div>
    </div>
  )
}