generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// =====================================================
// MODELOS DE AUTENTICACIÓN
// =====================================================

model Usuario {
  id            String          @id @default(cuid())
  cognitoId     String          @unique
  email         String          @unique
  nombre        String
  apellido      String
  avatar        String?
  rol           RolUsuario      @default(VENTAS)
  estado        EstadoUsuario   @default(ACTIVO)
  fechaCreacion DateTime        @default(now())
  fechaLogin    DateTime?
  creadoPor     String?
  
  // Relaciones
  clientesCreados   Cliente[]     @relation("ClienteCreador")
  proyectosCreados  Proyecto[]    @relation("ProyectoCreador")
  pagosGestionados  Pago[]        @relation("PagoGestor")
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("usuarios")
}

enum RolUsuario {
  SUPERADMIN
  ADMIN
  VENTAS
}

enum EstadoUsuario {
  ACTIVO
  INACTIVO
  SUSPENDIDO
}

// =====================================================
// MODELOS EXISTENTES ACTUALIZADOS
// =====================================================

model Cliente {
  id            String          @id @default(cuid())
  nombre        String
  email         String          @unique
  telefono      String?
  empresa       String?
  fechaRegistro DateTime        @default(now())
  estado        EstadoCliente   @default(ACTIVO)
  
  // Auditoría
  creadoPor     String?
  creador       Usuario?        @relation("ClienteCreador", fields: [creadoPor], references: [id])
  
  proyectos     Proyecto[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("clientes")
}

model Proyecto {
  id             String         @id @default(cuid())
  nombre         String
  tipo           TipoProyecto
  montoTotal     Float
  formaPago      FormaPago
  cuotas         Int?
  fechaInicio    DateTime
  fechaEntrega   DateTime?
  estadoProyecto EstadoProyecto @default(EN_DESARROLLO)
  estadoPago     EstadoPago     @default(PENDIENTE)
  
  // Relaciones
  clienteId      String
  cliente        Cliente        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  pagos          Pago[]
  
  // Auditoría
  creadoPor      String?
  creador        Usuario?       @relation("ProyectoCreador", fields: [creadoPor], references: [id])
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("proyectos")
}

model Pago {
  id               String    @id @default(cuid())
  numeroCuota      Int
  montoCuota       Float
  fechaVencimiento DateTime
  fechaPagoReal    DateTime?
  estadoPago       EstadoPago @default(PENDIENTE)
  metodoPago       String?
  notas            String?
  
  // Relaciones
  proyectoId       String
  proyecto         Proyecto  @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  
  // Auditoría
  gestionadoPor    String?
  gestor           Usuario?  @relation("PagoGestor", fields: [gestionadoPor], references: [id])
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("pagos")
}

// =====================================================
// ENUMS
// =====================================================

enum EstadoCliente {
  ACTIVO
  INACTIVO
}

enum TipoProyecto {
  SOFTWARE_A_MEDIDA
  ECOMMERCE
  LANDING_PAGE
  SISTEMA_WEB
  APP_MOVIL
  MANTENIMIENTO
}

enum FormaPago {
  PAGO_UNICO
  DOS_CUOTAS
  TRES_CUOTAS
  MENSUAL
}

enum EstadoProyecto {
  EN_DESARROLLO
  COMPLETADO
  EN_PAUSA
  CANCELADO
}

enum EstadoPago {
  PENDIENTE
  PAGADO
  VENCIDO
  PARCIAL
}