// =====================================================
// VERIFICACI√ìN DE SETUP SIMPLIFICADO - scripts/check-setup.ts
// =====================================================

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkSetup() {
  console.log('üîç Verificando configuraci√≥n de Jett Labs...\n')

  let allGood = true

  // 1. Verificar variables de entorno
  console.log('üìã Verificando variables de entorno...')
  const requiredEnvs = [
    'DATABASE_URL',
    'NEXTAUTH_URL',
    'NEXTAUTH_SECRET',
    'AWS_REGION',
    'AWS_COGNITO_USER_POOL_ID',
    'AWS_COGNITO_CLIENT_ID',
    'AWS_COGNITO_CLIENT_SECRET'
  ]

  const missingEnvs = requiredEnvs.filter(env => !process.env[env])
  
  if (missingEnvs.length > 0) {
    console.error('‚ùå Variables faltantes:')
    missingEnvs.forEach(env => console.error(`   - ${env}`))
    allGood = false
  } else {
    console.log('‚úÖ Variables de entorno configuradas')
  }

  // 2. Verificar base de datos
  console.log('\nüóÑÔ∏è  Verificando base de datos...')
  try {
    await prisma.$connect()
    console.log('‚úÖ Conexi√≥n exitosa')
    
    // Verificar esquema
    const userCount = await prisma.usuario.count()
    console.log(`‚úÖ Esquema v√°lido (${userCount} usuarios)`)
    
    // Verificar si hay admin
    const adminCount = await prisma.usuario.count({
      where: { rol: 'SUPERADMIN' }
    })
    
    if (adminCount === 0) {
      console.log('‚ö†Ô∏è  No hay usuarios SUPERADMIN')
    } else {
      console.log(`‚úÖ ${adminCount} usuario(s) SUPERADMIN`)
    }
    
  } catch (error: any) {
    console.error('‚ùå Error de base de datos:', error.message)
    allGood = false
  }

  // 3. Verificar configuraci√≥n de Cognito
  console.log('\nüîê Verificando configuraci√≥n de Cognito...')
  try {
    const { CognitoIdentityProviderClient, DescribeUserPoolClientCommand } = await import('@aws-sdk/client-cognito-identity-provider')
    
    const cognitoClient = new CognitoIdentityProviderClient({
      region: process.env.AWS_REGION!
    })

    const command = new DescribeUserPoolClientCommand({
      UserPoolId: process.env.AWS_COGNITO_USER_POOL_ID!,
      ClientId: process.env.AWS_COGNITO_CLIENT_ID!
    })

    const result = await cognitoClient.send(command)
    console.log('‚úÖ Configuraci√≥n de Cognito v√°lida')
    console.log(`   - Cliente: ${result.UserPoolClient?.ClientName || 'N/A'}`)
    
  } catch (error: any) {
    console.error('‚ùå Error de Cognito:', error.message)
    console.log('üí° Verifica:')
    console.log('   - USER_POOL_ID correcto')
    console.log('   - CLIENT_ID correcto')
    console.log('   - CLIENT_SECRET correcto')
    console.log('   - Regi√≥n correcta')
    allGood = false
  }

  // 4. Verificar configuraci√≥n de registro
  console.log('\nüìù Verificando configuraci√≥n de registro...')
  const registrationEnabled = process.env.ENABLE_PUBLIC_REGISTRATION === 'true'
  const nodeEnv = process.env.NODE_ENV || 'development'
  
  console.log(`   - Entorno: ${nodeEnv}`)
  console.log(`   - Registro p√∫blico: ${registrationEnabled ? '‚úÖ Habilitado' : '‚ùå Deshabilitado'}`)
  
  if (nodeEnv === 'development' && !registrationEnabled) {
    console.log('‚ö†Ô∏è  Recomendaci√≥n: Habilita ENABLE_PUBLIC_REGISTRATION=true en desarrollo')
  }

  // 5. Resumen final
  console.log('\n' + '='.repeat(50))
  if (allGood) {
    console.log('üéâ ¬°Configuraci√≥n completa y correcta!')
    console.log('\nüìã Pr√≥ximos pasos:')
    console.log('1. npm run dev (iniciar servidor)')
    console.log('2. Ve a http://localhost:3000')
    
    const adminCount = await prisma.usuario.count({ where: { rol: 'SUPERADMIN' } })
    if (adminCount === 0) {
      console.log('3. Registra el primer usuario SUPERADMIN')
      console.log('4. Confirma tu email')
      console.log('5. ¬°Inicia sesi√≥n!')
    } else {
      console.log('3. ¬°Inicia sesi√≥n y comienza!')
    }
  } else {
    console.log('‚ùå Hay problemas en la configuraci√≥n')
    console.log('\nüîß Revisa los errores mostrados arriba')
    console.log('üí° Consulta el README.md para m√°s ayuda')
  }
  console.log('='.repeat(50))

  return allGood
}

async function main() {
  try {
    const success = await checkSetup()
    process.exit(success ? 0 : 1)
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()